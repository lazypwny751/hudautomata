services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    container_name: hudautomata_db
    environment:
      POSTGRES_DB: hudautomata
      POSTGRES_USER: huduser
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U huduser"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hudautomata_network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hudautomata_backend
    env_file:
      - .env
    environment:
      - GIN_MODE=release
      - DB_DRIVER=postgres
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=huduser
      - DB_PASSWORD=${DB_PASSWORD:-changeme}
      - DB_NAME=hudautomata
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-change-in-production}
      - CORS_ORIGINS=http://localhost,http://localhost:80,http://frontend
      - HOST=0.0.0.0
      - PORT=8080
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - hudautomata_network
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: hudautomata_frontend
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - hudautomata_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  hudautomata_network:
    driver: bridge
